(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"hello-vuepress"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-vuepress"}},[t._v("#")]),t._v(" Hello VuePress!")]),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),s("h1",{attrs:{id:"gitflow规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitflow规范"}},[t._v("#")]),t._v(" gitflow规范")]),t._v(" "),s("h3",{attrs:{id:"实际开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际开发"}},[t._v("#")]),t._v(" 实际开发")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("签出版本\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature/xxx\n\n提交commit\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat: do something"')]),t._v("\n\n推送\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin feature/xxx\n")])])]),s("p",[s("a",{attrs:{href:"https://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git - 简明指南"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("本地仓库（三棵“树”）")]),t._v(" "),s("ul",[s("li",[t._v("工作目录（持有实际文件）")]),t._v(" "),s("li",[t._v("暂存区（缓存区域，临时保存变动）")]),t._v(" "),s("li",[t._v("HEAD（指向最后一次的提交）")])]),t._v(" "),s("h1",{attrs:{id:"base-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#base-git"}},[t._v("#")]),t._v(" base git")]),t._v(" "),s("h2",{attrs:{id:"create-clone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-clone"}},[t._v("#")]),t._v(" create & clone")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("初始化\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n克隆仓库（本地或远程）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("克隆目标仓库"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"add-remove"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-remove"}},[t._v("#")]),t._v(" add & remove")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("暂存更改到暂存区\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *\n\n移除暂存的更改\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remove "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"commit-synchronize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-synchronize"}},[t._v("#")]),t._v(" commit & synchronize")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("提交变更到HEAD\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"代码提交信息"')]),t._v("\n\n推送到远程\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n添加远程仓库\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n更新本地仓库（拉取远程仓库）pull "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 获取（fetch）+ 合并（merge） \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n")])])]),s("h2",{attrs:{id:"branches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[t._v("#")]),t._v(" branches")]),t._v(" "),s("p",[t._v("default local branch: "),s("code",[t._v("master")])]),t._v(" "),s("p",[t._v("开发新特性时，签出一个新分支，开发完成再合并回master")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("create branch“feature_x”，and switch：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature_x\n\nswitch branch\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n\ndelete branch\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".delete "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" -d：short of --delete，\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". delete remote\n")])])]),s("h2",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("合并其他分支到当前分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\nafter fix confict,need "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" changes：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("source_branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("target_branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("tag a commit\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("get commit ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])])]),s("h2",{attrs:{id:"log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[t._v("#")]),t._v(" log")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("glg\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\nonly "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" target author\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --author"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("songyuehang\n\ndisplay single line\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\n\nglgp树形结构显示\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --oneline --decorate --all\n\n看哪些文件改变了\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --name-status\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --help\n\n")])])]),s("h2",{attrs:{id:"restore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restore"}},[t._v("#")]),t._v(" restore")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("从HEAD 签出单文件\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n丢弃本地改动\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin\n\n回退（丢弃，彻底消失）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard origin/master\n\n丢弃提交（丢弃指针、暂存区）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("SHA"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n加hard 可以让工作区文件也丢弃\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("last good SHA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nreset找回\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n\n\nfull：\n彻底回退\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard  origin/master\n\nonly reset commit message\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --mixed\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### ")]),t._v("\n撤销（创建一个新的commit来抵消上次commit）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD\n\n撤销多次提交\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("倒数第一个提交"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("倒数第二个提交"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n还有两个参数\n--no-commit（只抵消暂存区和工作区变化，不产生新的提交）\n--no-edit（执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。）\n\ncommit消息替换\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fixes bug #42"')]),t._v("\n")])])]),s("h2",{attrs:{id:"放错分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#放错分支"}},[t._v("#")]),t._v(" 放错分支")]),t._v(" "),s("p",[t._v("把应该放另一个分支的东西，放错了放在当前分支上")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("新建一个feature 分支，他会指向最新提交\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch feature/xxx\n \n把当前分支的提交切回更改前版本\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("当前分支此前的最后一次提交"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n切到feature 的分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature/xxx\n")])])]),s("p",[t._v("reset vs revert")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git revert 后多出一条commit ，提醒同事，这里有回撤操作")]),t._v(" "),s("p",[t._v("创建逆向commit 来抵消提交（不会改变已存在的提交）")])]),t._v(" "),s("li",[s("p",[t._v("git reset 直接删commit，不留痕迹。")]),t._v(" "),s("p",[t._v("直接把之前 commit 删掉，非git reset --hard的操作是不会删掉修改代码，如果远程已经有之前代码，需要强推 git push -f")])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("提交不要，代码要（默认）")])]),t._v(" "),s("li",[s("p",[t._v("提交和代码都不要，加hard")]),t._v(" "),s("p",[t._v("git reset commit/xxx --hard")]),t._v(" "),s("p",[t._v("推送远程")]),t._v(" "),s("p",[t._v("git push -f")])])]),t._v(" "),s("p",[t._v("参数")]),t._v(" "),s("p",[t._v("--soft 回退后a分支修改的代码被保留并标记为add的状态（git status 是绿色的状态）")]),t._v(" "),s("p",[t._v("--mixed （默认）重置索引，但不重置工作树，还原文件为未提交（add）。")]),t._v(" "),s("p",[t._v("--hard 提交、变更、暂存区都清空")]),t._v(" "),s("p",[t._v("--merge 和--hard类似，只不过如果在执行reset命令之前你有改动一些文件并且未提交，merge会保留你的这些修改，hard则不会。【注：如果你的这些修改add过或commit过，merge和hard都将删除你的提交】")]),t._v(" "),s("p",[t._v("--keep 和--hard类似，执行reset之前改动文件如果是a分支修改了的，会提示你修改了相同的文件，不能合并。如果不是a分支修改的文件，会移除缓存区。git status还是可以看到保持了这些修改。")]),t._v(" "),s("h1",{attrs:{id:"系统学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统学习"}},[t._v("#")]),t._v(" 系统学习")]),t._v(" "),s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("h3",{attrs:{id:"origin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#origin"}},[t._v("#")]),t._v(" origin")]),t._v(" "),s("p",[t._v("在了解"),s("code",[t._v("origin/master")]),t._v("和"),s("code",[t._v("master")]),t._v("之前,我们需要先了解一下"),s("code",[t._v("git clone")]),t._v("做了什么.\n假设有一个服务器"),s("code",[t._v("git.mycompany.com")]),t._v(",执行"),s("code",[t._v("git clone")]),t._v("指令后")]),t._v(" "),s("blockquote",[s("p",[t._v("1.自动将远程服务器命名为"),s("code",[t._v("origin")]),t._v("\n2.下载该服务下的所有数据\n3.创建一个指向master分支的指针,并将该分支命名为origin/master\n4.创建名为master的本地分支,并且和远程分支在同一个提交节点")])]),t._v(" "),s("p",[t._v("tips:"),s("code",[t._v("origin")]),t._v("并不特别,就像分支名"),s("code",[t._v("master")]),t._v("在git中没有任何特殊意义一样.当执行"),s("code",[t._v("git init")]),t._v("时,"),s("code",[t._v("master")]),t._v("会作为初始分支的默认名字,因此使得"),s("code",[t._v("master")]),t._v("分支名被广泛使用.而"),s("code",[t._v("origin")]),t._v("是执行"),s("code",[t._v("git clone")]),t._v("时的默认服务器名称,当然可以通过指令"),s("code",[t._v("git clone -o cat")]),t._v(",使得默认服务器名称为"),s("code",[t._v("cat")]),t._v(",而默认远程分支为"),s("code",[t._v("cat/master")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"master-origin-master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#master-origin-master"}},[t._v("#")]),t._v(" master & origin/master")]),t._v(" "),s("p",[s("code",[t._v("master")]),t._v(" is local copy of the remoter branch "),s("code",[t._v("origin/master")])]),t._v(" "),s("blockquote",[s("p",[t._v("(remote & branch names are inspecial, like:  "),s("code",[t._v("cat/main")]),t._v(")")])]),t._v(" "),s("h4",{attrs:{id:"追踪分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#追踪分支"}},[t._v("#")]),t._v(" 追踪分支")]),t._v(" "),s("p",[t._v("从"),s("strong",[t._v("远程分支")]),s("code",[t._v("check out")]),t._v("签出一个"),s("strong",[t._v("本地分支")]),t._v(",该本地分支被称为"),s("strong",[t._v("追踪分支")]),t._v("(tracking branch),被追踪的分支被称为上游分支(upstream branch),")]),t._v(" "),s("p",[t._v("追踪分支可以理解为是和远程分支有直接关联的本地分支.")]),t._v(" "),s("blockquote",[s("p",[t._v("如果我们在追踪分支时执行"),s("code",[t._v("git pull")]),t._v(",git会自动知道需要获取和merge的分支的服务器.")]),t._v(" "),s("p",[t._v("执行"),s("code",[t._v("git clone")]),t._v("创建了本地仓库后,会自动创建一个追踪"),s("code",[t._v("origin/master")]),t._v("分支的本地追踪分支"),s("code",[t._v("master")]),t._v(",当然我们也可以根据需求添加其他的追踪分支.")])]),t._v(" "),s("h5",{attrs:{id:"创建新的追踪分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建新的追踪分支"}},[t._v("#")]),t._v(" 创建新的追踪分支")]),t._v(" "),s("p",[s("code",[t._v("git checkout -b [branch] [remotename]/[branch]")])]),t._v(" "),s("p",[t._v("git还提供了通用的"),s("code",[t._v("--track")]),t._v("简写操作: "),s("code",[t._v("git checkout --track origin/dev")]),t._v(",")]),t._v(" "),s("p",[t._v("它做了什么呢?")]),t._v(" "),s("ol",[s("li",[t._v("分支"),s("code",[t._v("dev")]),t._v("被设定为追踪服务器为"),s("code",[t._v("origin")]),t._v("上的远程分支"),s("code",[t._v("dev")])]),t._v(" "),s("li",[t._v("切换到"),s("code",[t._v("dev")]),t._v("分支上")])]),t._v(" "),s("p",[t._v("如果"),s("code",[t._v("checkout")]),t._v("的分支本地不存在,但是和远程分支名一样,git会自动创建追踪分支,并且切换到该分支 :  "),s("code",[t._v("git checkout [branch]")]),t._v("\n本地分支必须和远程分支同名吗?当然不是,我们也可以为本地分支设置不同于远程分支的名字 :  "),s("code",[t._v("git checkout -b aaa origin/bbb")]),t._v(",这样本地"),s("code",[t._v("aaa")]),t._v("为远程"),s("code",[t._v("bbb")]),t._v("的追踪分支.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("查看分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n\n创建追踪分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从远程分支签出一个分支到本地")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --track origin/dev "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 缩写")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果本地没有该分支但是远程有，也会签出对应的追踪分支")]),t._v("\n\n给一个分支设置上游分支（生成新的追踪分支）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -u oringin/master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --set-upstream-to oringin/master\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin master\n\n查看上游分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -vv\n\n删除本地分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n删除远程分支（只移除指针）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n删除追踪分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d --remotes origin/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n上游分支缩写\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("upstream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等价于")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge origin/master\n\n分支重命名\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m \n")])])]),s("h2",{attrs:{id:"alias-zsh-git-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#alias-zsh-git-plugin"}},[t._v("#")]),t._v(" alias（zsh git plugin）")]),t._v(" "),s("p",[t._v("https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);